{"version":3,"sources":["components/SideBar.js","components/PostTitle.js","components/PostDateAndTime.js","components/PostBody.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","style","textAlign","href","target","src","height","width","marginTop","fontFamily","color","listStyle","textDecoration","marginBottom","action","method","type","placeholder","required","Button","variant","size","PostTitle","PostDateAndTime","PostBody","Post","border","borderTop","App","Container","fluid","Row","Col","lg","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAqDeA,MAlDf,WACE,OACE,yBAAKC,MAAO,CAAEC,UAAW,UACvB,6BACE,uBAAGC,KAAK,sCAAsCC,OAAO,UACnD,yBACEC,IAAI,2PACJC,OAAO,MACPC,MAAM,UAIZ,wBAAIN,MAAO,CAACO,UAAW,OAAQC,WAAY,YAAaC,MAAO,oBAA/D,eACA,wBACET,MAAO,CACLU,UAAW,OACXC,eAAgB,YAChBF,MAAO,WAGT,4BACE,uBAAGP,KAAK,IAAIF,MAAO,CAAES,MAAO,YAA5B,SAIF,4BACE,uBAAGP,KAAK,SAASF,MAAO,CAAES,MAAO,YAAjC,UAIF,4BACE,uBACEP,KAAK,+BACLC,OAAO,SACPH,MAAO,CAAES,MAAO,YAHlB,aAUJ,wBAAIT,MAAO,CAACY,aAAc,IAAKJ,WAAY,YAAaC,MAAO,oBAA/D,aACA,0BAAMI,OAAO,qBAAqBC,OAAO,QACvC,2BAAOC,KAAK,QAAQC,YAAY,gBAAgBC,UAAQ,IACxD,kBAACC,EAAA,EAAD,CAAQH,KAAK,SAASI,QAAQ,eAAeC,KAAK,KAAKpB,MAAO,CAACO,UAAU,QAAzE,aCrCOc,MARf,WACE,OACE,wBAAKrB,MAAO,CAACQ,WAAY,YAAaC,MAAO,oBAA7C,6CCMWa,MARf,WACE,OACE,uBAAGtB,MAAO,CAACQ,WAAY,eAAgBC,MAAO,oBAA9C,8BCkBWc,MApBf,WACE,OACE,uBAAGvB,MAAO,CAACQ,WAAY,eAAgBC,MAAO,YAA9C,w5BCoBWe,MAlBf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,wBACExB,MAAO,CACLO,UAAW,OACXK,aAAc,OACda,OAAQ,IACRC,UAAW,oCCQNC,MAjBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CAAK9B,MAAO,CAACO,UAAW,SACtB,kBAACwB,EAAA,EAAD,CAAKC,GAAI,EAAGhC,MAAO,IACjB,kBAAC,EAAD,OAEF,kBAAC+B,EAAA,EAAD,CAAKC,GAAI,EAAGhC,MAAO,CAACiC,WAAY,SAC9B,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCNUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.647a1d58.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from 'react-bootstrap/Button';\n\nfunction Sidebar() {\n  return (\n    <div style={{ textAlign: \"right\" }}>\n      <div>\n        <a href=\"https://www.instagram.com/kwanxhen/\" target=\"_blank\">\n          <img\n            src=\"https://instagram.fsin1-1.fna.fbcdn.net/v/t51.2885-15/sh0.08/e35/s640x640/83441816_498409914447348_5767187672467782_n.jpg?_nc_ht=instagram.fsin1-1.fna.fbcdn.net&_nc_cat=100&_nc_ohc=TBAM5jFLhAUAX_WCCxA&oh=fec08dec8761a59c04a1a205466438d6&oe=5F3EA9E6\"\n            height=\"250\"\n            width=\"200\"\n          />\n        </a>\n      </div>\n      <h6 style={{marginTop: '10px', fontFamily: 'Open Sans', color: 'rgba(0,0,0,.84)'}}>kwanxhen.me</h6>\n      <ul\n        style={{\n          listStyle: \"none\",\n          textDecoration: \"underline\",\n          color: \"yellow\",\n        }}\n      >\n        <li>\n          <a href=\"/\" style={{ color: \"#262626\" }}>\n            home\n          </a>\n        </li>\n        <li>\n          <a href=\"/about\" style={{ color: \"#262626\" }}>\n            about\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"https://twitter.com/kwanxhen\"\n            target=\"_blank\"\n            style={{ color: \"#262626\" }}\n          >\n            twitter\n          </a>\n        </li>\n      </ul>\n      \n      <h6 style={{marginBottom: \"0\", fontFamily: 'Open Sans', color: 'rgba(0,0,0,.84)'}}>subscribe</h6>\n      <form action=\"https://google.com\" method=\"post\">\n        <input type=\"email\" placeholder=\"email address\" required />\n        <Button type=\"submit\" variant=\"outline-dark\" size=\"sm\" style={{marginTop:'3px'}}>submit</Button>\n      </form>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React from \"react\";\n\nfunction PostTitle () {\n  return(\n    <h1  style={{fontFamily: 'Open Sans', color: 'rgba(0,0,0,.84)'}}>\n      Lorem ipsum dolor sit amet, consectetur.\n    </h1>\n  );\n}\n\nexport default PostTitle;","import React from \"react\";\n\nfunction PostDateAndTime () {\n  return(\n    <p style={{fontFamily: 'Merriweather', color: 'rgba(0,0,0,.54)'}}>\n      August 5, 2019, 500 Words\n    </p>\n  );\n}\n\nexport default PostDateAndTime;","import React from \"react\";\n\nfunction PostBody() {\n  return (\n    <p style={{fontFamily: 'Merriweather', color: '#292929'}}>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus non orci\n      sed turpis dictum lobortis vitae ut ligula. Fusce nunc felis, bibendum\n      quis dolor ut, volutpat tristique massa. Sed nunc nunc, interdum quis\n      congue sed, consequat sed ipsum. Suspendisse venenatis, ante at tincidunt\n      bibendum, erat tellus dictum nisi, ac commodo ipsum libero eget quam.\n      Morbi pharetra fermentum cursus. Donec libero nibh, tempor eu metus sit\n      amet, luctus euismod lacus. Quisque tincidunt non lectus ut tincidunt.\n      Suspendisse at nulla in dolor placerat pharetra. Fusce est nisi, dapibus\n      vel mattis laoreet, varius at enim. Phasellus faucibus luctus leo, et\n      suscipit ligula rutrum eu. Integer porttitor massa est, ac finibus diam\n      elementum et. Mauris condimentum consectetur magna, sed molestie dolor\n      posuere ac. Etiam nec ipsum vel augue tincidunt sollicitudin. Praesent\n      lacinia tellus mauris, vitae eleifend purus pharetra eu.\n    </p>\n  );\n}\n\nexport default PostBody;\n","import React from \"react\";\n\nimport PostTitle from \"./PostTitle\";\nimport PostDateAndTime from \"./PostDateAndTime\";\nimport PostBody from \"./PostBody\";\n\nfunction Post() {\n  return (\n    <div>\n      <PostTitle />\n      <PostDateAndTime />\n      <PostBody />\n      <hr\n        style={{\n          marginTop: \"2rem\",\n          marginBottom: \"2rem\",\n          border: \"0\",\n          borderTop: \"1px solid rgba(0, 0, 0, 0.2)\",\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Post;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Container, Row, Col, Grid } from 'react-bootstrap';\n\n//import React pages\nimport Sidebar from \"./components/SideBar\";\nimport Post from \"./components/Post\";\n\nfunction App() {\n  return (\n    <Container fluid>\n      <Row style={{marginTop: \"50px\"}}>\n        <Col lg={2} style={{}}>\n          <Sidebar />\n        </Col>\n        <Col lg={6} style={{marginLeft: \"40px\"}}>\n          <Post />\n          <Post />\n          <Post />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}